namespace app;

use db;
use utils;
use server;
use json;
use runtime;

define App {
    const name = 'WordGuesser';
    const version = '1.0.0';

    let sessionToken;
    let instance;

    fn construct() {
        error err: this.instance = db.connect();
        if err != nil {
            fail(`Failed to start the application & DB Error: {{ err }}`);
        }
        this.session();
        server.json();
    }

    fn session() {
        let token;
        error err: token = server.request.cookie('session');
        if err != nil || token == '' {
            token = utils.randomString(64);
        }
        this.sessionToken = token;
        server.setCookie(array {
            name: 'session',
            value: token,
            path: '/',
        });
    }

    fn getWordState() {
        const wordState = state('session:' + this.sessionToken);
        const data = wordState.get('data');

        if data == nil {
            error err: const word = this.instance.queryRow('SELECT id, word FROM words ORDER BY RANDOM() LIMIT 1');
            if err != nil {
                fail('Failed to fetch word from database');
            }

            data = array {
                id: word.id,
                word: word.word,
                guesses: [],
                incorrect: [],
            };

            wordState.set('data', data);
            return data;
        }

        return data;
    }

    fn setWordState(word) {
        state('session:' + this.sessionToken).set('data', word);
    }

    fn handleError(err) {
        return server.write(json.toString(array {
            'error': err,
        }));
    }
}